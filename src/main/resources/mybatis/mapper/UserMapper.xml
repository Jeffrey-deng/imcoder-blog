<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="user">

    <delete id="deleteUser" parameterType="Long">
        delete from user where uid=#{uid}
    </delete>

    <!-- 查询所有 -->
    <select id="findUserList" resultType="user" parameterType="hashmap">
        select * from user
        <!-- 查询时拼装条件 -->
        <if test="condition != null">
            <where>
                <if test="uid>0">and uid=#{condition.uid}</if>
                <if test="nickname!=null and nickname!=''">and nickname like concat('%', #{condition.nickname} ,'%')
                </if>
                <if test="username!=null and username!=''">and username=#{condition.username}</if>
            </where>
        </if>
        limit #{startRow},#{pageSize}
    </select>

    <!-- 查询总行数 -->
    <select id="findUserListCount" resultType="int" parameterType="user">
        select count(*) from user
        <if test="condition != null">
            <where>
                <if test="uid>0">and uid=#{condition.uid}</if>
                <if test="nickname!=null and nickname!=''">and nickname like concat('%', #{condition.nickname} ,'%')
                </if>
                <if test="username!=null and username!=''">and username=#{condition.username}</if>
            </where>
        </if>
    </select>

    <!-- 保存 -->
    <insert id="saveUser" parameterType="user">
        insert into user(uid, gid,nickname,phone,sex,email,description,head_photo,qq)
        values(#{uid}, #{userGroup.gid},#{nickname},#{phone},#{sex},#{email},#{description},#{head_photo},#{qq})
    </insert>

    <!-- 保存 个人资料-->
    <update id="updateUserProfile" parameterType="user">
        update user set
        head_photo=#{head_photo},nickname=#{nickname},phone=#{phone},sex=#{sex},description=#{description},qq=#{qq},weibo=#{weibo},site=#{site},address=#{address},birthday=#{birthday},says=#{says}
        where uid = #{uid}
    </update>

    <resultMap id="userMap" type="user">
        <id column="uid" property="uid"/>
        <result column="nickname" property="nickname"/>
        <result column="phone" property="phone"/>
        <result column="sex" property="sex"/>
        <result column="email" property="email"/>
        <result column="address" property="address"/>
        <result column="birthday" property="birthday"/>
        <result column="description" property="description"/>
        <result column="head_photo" property="head_photo"/>
        <result column="qq" property="qq"/>
        <result column="weibo" property="weibo"/>
        <result column="site" property="site"/>
        <result column="says" property="says"/>
        <association property="userGroup" column="gid" javaType="userGroup">
            <result column="gid" property="gid"/>
            <result column="group_name" property="group_name"/>
        </association>
        <association property="userStatus" javaType="userStatus">
            <result column="uid" property="uid"/>
            <result column="lock_status" property="lock_status"/>
            <result column="register_ip" property="register_ip"/>
            <result column="register_time" property="register_time" javaType="java.util.Date" jdbcType="BIGINT"/>
            <result column="last_login_ip" property="last_login_ip"/>
            <result column="last_login_time" property="last_login_time" javaType="java.util.Date" jdbcType="BIGINT"/>
        </association>
    </resultMap>

    <!-- 根据ID查询 -->
    <select id="findUser" parameterType="user" resultMap="userMap">
        select
        u.uid,nickname,phone,sex,email,address,birthday,description,head_photo,qq,weibo,site,says,
        ust.lock_status,ust.register_ip,ust.register_time,ust.last_login_ip,ust.last_login_time,
        ug.gid,ug.group_name
        from (user u left join user_group ug on u.gid=ug.gid) left join user_status ust on u.uid = ust.uid
        where u.uid = #{uid}
        limit 1
    </select>

    <!-- 插入用户配置新行 -->
    <insert id="insertUserSetting" parameterType="userSetting">
        insert into user_setting (uid, receive_notify_email, profile_view_level, page_background) values (#{uid}, #{receiveNotifyEmail}, #{profileViewLevel}, #{pageBackground});
    </insert>

    <!-- 查找用户配置 -->
    <select id="findUserSetting" parameterType="user" resultMap="userSettingMap">
        select uid, receive_notify_email, profile_view_level, page_background from user_setting where uid = #{uid}
    </select>

    <!-- 更新用户配置 -->
    <update id="updateUserSetting" parameterType="userSetting">
        update user_setting set receive_notify_email = #{receiveNotifyEmail}, profile_view_level = #{profileViewLevel}, page_background = #{pageBackground} where uid = #{uid}
    </update>

    <resultMap id="userSettingMap" type="userSetting">
        <result column="uid" property="uid"/>
        <result column="receive_notify_email" property="receiveNotifyEmail"/>
        <result column="profile_view_level" property="profileViewLevel"/>
        <result column="page_background" property="pageBackground"/>
    </resultMap>

    <!-- 插入用户状态新行 -->
    <insert id="insertUserStatus" parameterType="userStatus">
        insert into user_status (uid, lock_status, register_ip, register_time)
        values (#{uid},#{lock_status},
        #{register_ip},#{register_time,javaType=Date,jdbcType=BIGINT,typeHandler=site.imcoder.blog.dao.typehandler.DateTypeHandler})
    </insert>

    <!-- 更新用户状态 -->
    <update id="updateUserStatus" parameterType="userStatus">
        update user_status
        <set>
            <if test="register_ip != null">register_ip = #{register_ip},</if>
            <if test="register_time != null">register_time =
                #{register_time,javaType=Date,jdbcType=BIGINT,typeHandler=site.imcoder.blog.dao.typehandler.DateTypeHandler},
            </if>
            <if test="last_login_ip != null">last_login_ip = #{last_login_ip},</if>
            <if test="last_login_time != null">last_login_time =
                #{last_login_time,javaType=Date,jdbcType=BIGINT,typeHandler=site.imcoder.blog.dao.typehandler.DateTypeHandler},
            </if>
        </set>
        <where>
            uid = #{uid}
        </where>
    </update>

    <!-- *************************关注 start********************* -->

    <!-- 检查是否fansUser关注了hostUser -->
    <select id="checkFollow" parameterType="follow" resultType="int">
        select count(*) from user_follow where ( uid=#{followerUid} and fuid=#{followingUid} )
    </select>

    <!-- 保存关注 如果已关注则不插入 由count判断 -->
    <insert id="saveFollow" parameterType="hashMap">
        <selectKey keyProperty="count" resultType="int" order="BEFORE">
            select count(*) from user_follow where ( uid=#{follow.followerUid} and fuid=#{follow.followingUid} )
        </selectKey>
        <if test="count == 0">
            insert into user_follow(UID,FUID) values (#{follow.followerUid},#{follow.followingUid})
        </if>
        <if test="count > 0">
            select count(*) from user_follow where ( uid=#{follow.followerUid} and fuid=#{follow.followingUid} )
        </if>
    </insert>

    <!-- 查询用户关注列表 -->
    <select id="findFollowingList" parameterType="user" resultMap="userMap_contact">
        select uf.fuid as userid,nickname,sex,email,address,birthday,description,head_photo,qq,weibo,says,site,
        ug.gid,ug.group_name
        from user_follow uf left join
        ( user u left join user_group ug on u.gid=ug.gid ) on uf.fuid=u.uid
        <where>
            uf.uid=#{uid}
        </where>
    </select>

    <!-- 查询粉丝关注列表 -->
    <select id="findFollowerList" parameterType="user" resultMap="userMap_contact">
        select uf.uid as userid,nickname,sex,email,address,birthday,description,head_photo,qq,weibo,says,site,
        ug.gid,ug.group_name
        from user_follow uf left join
        ( user u left join user_group ug on u.gid=ug.gid ) on uf.uid=u.uid
        <where>
            uf.fuid=#{uid}
        </where>
    </select>

    <resultMap id="userMap_contact" type="user">
        <result column="userid" property="uid"/>
        <result column="nickname" property="nickname"/>
        <result column="sex" property="sex"/>
        <result column="email" property="email"/>
        <result column="address" property="address"/>
        <result column="birthday" property="birthday"/>
        <result column="description" property="description"/>
        <result column="head_photo" property="head_photo"/>
        <result column="qq" property="qq"/>
        <result column="weibo" property="weibo"/>
        <result column="site" property="site"/>
        <result column="says" property="says"/>
        <association property="userGroup" javaType="userGroup">
            <result column="gid" property="gid"/>
            <result column="group_name" property="group_name"/>
        </association>
    </resultMap>

    <!-- 删除关注关系 -->
    <delete id="deleteFollow" parameterType="follow">
        delete from user_follow where ( uid=#{followerUid} and fuid=#{followingUid} )
    </delete>

    <!-- *************************关注 end********************* -->

    <!-- *************************好友 start********************* -->

    <!-- 检查是否相互关注 -->
    <select id="checkMutualFollow" parameterType="follow" resultType="int">
        select count(*) as cnt from user_follow where
        ( uid=#{followerUid} and fuid=#{followingUid} ) or ( uid=#{followingUid} and fuid=#{followerUid} )
    </select>

    <!-- 检查是否为好友 -->
    <select id="checkFriendRelationship" parameterType="friend" resultType="int">
        select count(*) as cnt from friends where
        ( uid=#{uid} and fid=#{fid} ) or ( uid=#{fid} and fid=#{uid} )
    </select>

    <!-- 保存好友 -->
    <insert id="beFriend" parameterType="friend">
        insert into friends(UID,FID)
        values(#{uid},#{fid})
    </insert>

    <!-- 查询用户好友 -->
    <select id="findFriendList" parameterType="user" resultMap="userMap_contact">
        select f.fid as userid,nickname,sex,email,address,birthday,description,head_photo,qq,weibo,says,site,
        ug.gid,ug.group_name
        from friends f left join
        ( user u left join user_group ug on u.gid=ug.gid ) on f.fid=u.uid
        <where>
            f.uid=#{uid}
        </where>
    </select>

    <!-- 删除好友关系 -->
    <delete id="deleteFriend" parameterType="friend">
        delete from friends where
        ( uid=#{uid} and fid=#{fid} ) or ( uid=#{fid} and fid=#{uid} )
    </delete>

    <!-- *************************好友 end********************* -->

    <!-- *************************收藏 start********************* -->
    <!-- 检查收藏是否重复 -->
    <select id="checkCollection" parameterType="collect" resultType="int">
        select count(*) from collection where ( uid=#{uid} and aid=#{article.aid} );
    </select>

    <!-- 插入用户收藏表行 -->
    <insert id="saveCollection" parameterType="collect">
        insert into collection(uid,aid,clet_time) values (#{uid},#{article.aid},#{clet_time})
    </insert>

    <!-- 删除用户收藏表行  -->
    <insert id="deleteCollection" parameterType="collect">
        delete from collection where ( uid=#{uid} and aid=#{article.aid} )
    </insert>

    <!-- 查找收藏文章列表 -->
    <select id="findCollectList" parameterType="user" resultMap="collectListMap">
        select coid,c.uid,a.aid,a.title,clet_time,
        u.uid as auid,u.nickname
        from collection c left join
        ( article a left join user u on a.uid = u.uid )
        on c.aid=a.aid
        where c.uid=#{uid}
    </select>

    <resultMap id="collectListMap" type="collect">
        <id column="coid" property="coid"/>
        <result column="uid" property="uid"/>
        <result column="clet_time" property="clet_time"/>
        <association property="article" javaType="article">
            <result column="aid" property="aid"/>
            <result column="title" property="title"/>
            <association property="author" javaType="user">
                <result column="auid" property="uid"/>
                <result column="nickname" property="nickname"/>
            </association>
        </association>
    </resultMap>

    <!-- *************************收藏 end********************* -->

    <!-- 文章动作记录 start -->
    <select id="findArticleActionRecord" parameterType="actionRecord" resultMap="articleActionRecordMap">
        select ar.aar_id, ar.UID, (case when (ar.UID = 0) then ar.ip else u.nickname end) as nickname, u.sex, u.head_photo, u.gid, ar.ip,
        (case when (ar.liked > 0) then true else false end) as liked, (case when (ar.like_at = 0) then null else ar.like_at end) as like_at,
        (case when (ar.commented > 0) then true else false end) as commented, (case when (ar.comment_at = 0) then null else ar.comment_at end) as comment_at,
        (case when (ad.aad_id is not null) then true else false end) as accessed, ad.last_access_time as access_at,
        ad.aad_id, ad.first_access_path, ad.first_access_referer, ad.first_access_time,
        ad.last_access_time, ad.last_access_ip, ad.last_access_user_agent, ad.access_times, ad.deep,
        a.aid, a.title, a.tags, a.summary, a.create_time, a.update_time, a.click_count, a.collect_count, a.comment_count,
        a.permission, a.top, a.recommend,
        at.atid, at.atname,
        a.uid as author_uid, au.nickname as author_nickname, au.sex as author_sex, au.head_photo as author_head_photo,
        au.gid as author_gid, aug.group_name as author_group_name
        from ((article_action_record ar left join article_access_detail ad on ar.aar_id = ad.aar_id) left join user u on ar.uid = u.uid)
        left join ((article a left join article_type at on a.atid = at.atid) left join (user au left join user_group aug on au.gid = aug.gid) on a.uid = au.uid)
        on ar.aid = a.aid
        <where>
            <choose>
                <when test="(ar_id != null and ar_id > 0) or (creation != null and creation.aid != null and ((user != null and user.uid != null and user.uid > 0) or (ip != null and ip != '')))">
                    <choose>
                        <when test="ar_id != null and ar_id > 0">
                            and ar.aar_id = #{ar_id}
                        </when>
                        <otherwise>
                            <choose>
                                <when test="user != null and user.uid != null and user.uid > 0">
                                    and ar.AID = #{creation.aid} and ar.UID = #{user.uid}
                                </when>
                                <otherwise>
                                    and ar.AID = #{creation.aid} and ar.UID = 0 and ar.ip = #{ip}
                                </otherwise>
                            </choose>
                        </otherwise>
                    </choose>
                </when>
                <otherwise>
                    1 != 1
                </otherwise>
            </choose>
        </where>
        limit 1
    </select>

    <select id="findSimpleArticleActionRecord" parameterType="actionRecord" resultType="actionRecord">
        select ar.aar_id as ar_id from article_action_record ar
        <where>
            <choose>
                <when test="(ar_id != null and ar_id > 0) or (creation != null and creation.aid != null and ((user != null and user.uid != null and user.uid > 0) or (ip != null and ip != '')))">
                    <choose>
                        <when test="ar_id != null and ar_id > 0">
                            and ar.aar_id = #{ar_id}
                        </when>
                        <otherwise>
                            <choose>
                                <when test="user != null and user.uid != null and user.uid > 0">
                                    and ar.AID = #{creation.aid} and ar.UID = #{user.uid}
                                </when>
                                <otherwise>
                                    and ar.AID = #{creation.aid} and ar.UID = 0 and ar.ip = #{ip}
                                </otherwise>
                            </choose>
                        </otherwise>
                    </choose>
                </when>
                <otherwise>
                    1 != 1
                </otherwise>
            </choose>
        </where>
        limit 1
    </select>

    <select id="findArticleActionRecordList" parameterType="hashMap" resultMap="articleActionRecordMap">
        select ar.aar_id, ar.UID, (case when (ar.UID = 0) then ar.ip else u.nickname end) as nickname, u.sex, u.head_photo, u.gid, ar.ip,
        (case when (ar.liked > 0) then true else false end) as liked, (case when (ar.like_at = 0) then null else ar.like_at end) as like_at,
        (case when (ar.commented > 0) then true else false end) as commented, (case when (ar.comment_at = 0) then null else ar.comment_at end) as comment_at,
        (case when (ad.aad_id is not null) then true else false end) as accessed, ad.last_access_time as access_at,
        ad.aad_id, ad.first_access_path, ad.first_access_referer, ad.first_access_time,
        ad.last_access_time, ad.last_access_ip, ad.last_access_user_agent, ad.access_times, ad.deep,
        a.aid, a.title, a.tags, a.summary, a.create_time, a.update_time, a.click_count, a.collect_count, a.comment_count,
        a.permission, a.top, a.recommend,
        at.atid, at.atname,
        a.uid as author_uid, au.nickname as author_nickname, au.sex as author_sex, au.head_photo as author_head_photo,
        au.gid as author_gid, aug.group_name as author_group_name
        from ((article_action_record ar left join article_access_detail ad on ar.aar_id = ad.aar_id) left join user u on ar.uid = u.uid)
        left join ((
        (select all_a.* from article all_a
        <where>
            <choose>
                <when test="loginUser != null and loginUser.uid > 0 and loginUser.userGroup.gid == '-1'">
                    and (1 = 1)
                </when>
                <when test="loginUser != null and loginUser.uid > 0">
                    and (
                    all_a.uid = #{loginUser.uid}
                    or
                    (
                    (all_a.permission = 0 or all_a.permission = 1)
                    or
                    (all_a.permission = 2 or all_a.permission = 2)
                    or
                    ((all_a.permission = 4 or all_a.permission = 3) and all_a.uid in (select following.fuid from
                    user_follow following where following.uid = #{loginUser.uid}))
                    or
                    ((all_a.permission = 6 or all_a.permission = 4) and all_a.uid in (select follower.uid from
                    user_follow follower where follower.fuid = #{loginUser.uid}))
                    or
                    ((all_a.permission = 8 or all_a.permission = 5) and all_a.uid in (select friend.uid from friends
                    friend where friend.fid = #{loginUser.uid}))
                    )
                    )
                </when>
                <otherwise>
                    and (all_a.permission = 0 or all_a.permission = 1)
                </otherwise>
            </choose>
        </where>
        ) a left join article_type at on a.atid = at.atid) left join (user au left join user_group aug on au.gid = aug.gid) on a.uid = au.uid)
        on ar.aid = a.aid
        <where>
            <if test="condition.user != null and condition.user.uid != null">
                and ar.UID = #{condition.user.uid}
            </if>
            <if test="condition.creation != null">
                <if test="condition.creation.aid != null and condition.creation.aid > 0">
                    and ar.AID = #{condition.creation.aid}
                </if>
            </if>
            <if test="condition.ip != null and condition.ip != ''">
                and ar.ip = #{condition.ip}
            </if>
            <if test="condition.liked">
                and ar.liked > 0
            </if>
            <if test="condition.commented">
                and ar.commented > 0
            </if>
            <if test="condition.accessed">
                and (ad.aad_id is not null)
            </if>
            <if test="condition.accessDetail != null">
                <if test="condition.accessDetail.deep != null and condition.accessDetail.deep > 0">
                    and ad.deep = #{condition.deep}
                </if>
                <if test="condition.accessDetail.last_access_ip != null and condition.accessDetail.last_access_ip != ''">
                    and ad.last_access_ip = #{condition.last_access_ip}
                </if>
            </if>
        </where>
        <choose>
            <when test="condition.liked">
                order by ar.like_at desc
            </when>
            <when test="condition.commented">
                order by ar.comment_at desc
            </when>
            <when test="condition.accessed">
                order by ar.access_at desc
            </when>
            <otherwise>
                order by ar.aar_id desc
            </otherwise>
        </choose>
    </select>

    <insert id="saveArticleActionRecord" parameterType="actionRecord" useGeneratedKeys="true" keyProperty="ar_id" keyColumn="aar_id">
        insert into article_action_record (UID, ip, AID, liked, like_at, commented, comment_at)
        values (#{user.uid}, #{ip}, #{creation.aid}, #{liked}, #{like_at}, #{commented}, #{comment_at})
    </insert>

    <update id="updateArticleActionRecord" parameterType="actionRecord">
        update article_action_record ar
        <set>
            <if test="liked != null">
                liked = (case when #{liked} then 1 else 0 end),
            </if>
            <if test="like_at != null">
                like_at = #{like_at}
            </if>
            <if test="commented != null">
                commented = (case when #{commented} then 1 else 0 end),
            </if>
            <if test="comment_at != null">
                comment_at = #{comment_at}
            </if>
        </set>
        <where>
            <choose>
                <when test="(ar_id != null and ar_id > 0) or (creation != null and creation.aid != null and ((user != null and user.uid != null and user.uid > 0) or (ip != null and ip != '')))">
                    <choose>
                        <when test="ar_id != null and ar_id > 0">
                            and aar_id = #{ar_id}
                        </when>
                        <otherwise>
                            <choose>
                                <when test="user != null and user.uid != null and user.uid > 0">
                                    and ar.AID = #{creation.aid} and ar.UID = #{user.uid}
                                </when>
                                <otherwise>
                                    and ar.AID = #{creation.aid} and ar.UID = 0 and ar.ip = #{ip}
                                </otherwise>
                            </choose>
                        </otherwise>
                    </choose>
                </when>
                <otherwise>
                    1 != 1
                </otherwise>
            </choose>
        </where>
    </update>

    <select id="findSimpleArticleAccessDetail" parameterType="accessDetail" resultType="accessDetail">
        select aar_id as ar_id, first_access_path, first_access_referer, first_access_time,
        last_access_time, last_access_ip, last_access_user_agent, access_times, deep
        from article_access_detail
        where aar_id = #{ar_id}
        limit 1
    </select>

    <insert id="saveArticleAccessDetail" parameterType="accessDetail">
        insert into article_access_detail (aar_id, first_access_path, first_access_referer, first_access_time,
        last_access_time, last_access_ip, last_access_user_agent, access_times, deep)
        values (#{ar_id}, #{first_access_path}, #{first_access_referer}, #{first_access_time},
        #{last_access_time}, #{last_access_ip}, #{last_access_user_agent}, #{access_times}, #{deep})
    </insert>

    <update id="updateArticleAccessDetail" parameterType="accessDetail">
        update article_access_detail set last_access_time = #{last_access_time}, last_access_ip = #{last_access_ip},
        last_access_user_agent = #{last_access_user_agent}, access_times = #{access_times}, deep = #{deep}
        where aar_id = #{ar_id}
    </update>

    <delete id="deleteArticleAccessDetail" parameterType="accessDetail">
        delete from article_access_detail where aar_id = #{ar_id}
    </delete>

    <resultMap id="articleActionRecordMap" type="actionRecord">
        <id column="aar_id" property="ar_id"/>
        <id column="ip" property="ip"/>
        <result column="liked" property="liked"/>
        <result column="like_at" property="like_at"/>
        <result column="commented" property="commented"/>
        <result column="comment_at" property="comment_at"/>
        <result column="accessed" property="accessed"/>
        <result column="access_at" property="access_at"/>
        <association property="user" column="uid" javaType="user">
            <result column="uid" property="uid"/>
            <result column="nickname" property="nickname"/>
            <result column="sex" property="sex"/>
            <result column="head_photo" property="head_photo"/>
        </association>
        <association property="creation" column="aid" javaType="article">
            <result column="aid" property="aid"/>
            <result column="title" property="title"/>
            <result column="tags" property="tags"/>
            <result column="summary" property="summary"/>
            <result column="create_time" property="create_time" javaType="java.util.Date" jdbcType="BIGINT"/>
            <result column="update_time" property="update_time" javaType="java.util.Date" jdbcType="BIGINT"/>
            <result column="click_count" property="click_count"/>
            <result column="collect_count" property="collect_count"/>
            <result column="comment_count" property="comment_count"/>
            <result column="permission" property="permission"/>
            <result column="top" property="top"/>
            <result column="recommend" property="recommend"/>
            <association property="category" column="atid" javaType="category">
                <result column="atid" property="atid"/>
                <result column="atname" property="atname"/>
            </association>
            <association property="author" column="author_uid" javaType="user">
                <result column="author_uid" property="uid"/>
                <result column="author_nickname" property="nickname"/>
                <result column="author_sex" property="sex"/>
                <result column="author_head_photo" property="head_photo"/>
                <association property="userGroup" column="author_gid" javaType="userGroup">
                    <result column="author_gid" property="gid"/>
                    <result column="author_group_name" property="group_name"/>
                </association>
            </association>
        </association>
        <association property="accessDetail" column="aad_id" javaType="accessDetail">
            <result column="first_access_path" property="first_access_path"/>
            <result column="first_access_referer" property="first_access_referer"/>
            <result column="first_access_time" property="first_access_time"/>
            <result column="last_access_time" property="last_access_time"/>
            <result column="last_access_ip" property="last_access_ip"/>
            <result column="last_access_user_agent" property="last_access_user_agent"/>
            <result column="access_times" property="access_times"/>
            <result column="deep" property="deep"/>
        </association>
    </resultMap>
    <!-- 文章动作记录 end -->

    <!-- 视频动作记录 start -->
    <select id="findVideoActionRecord" parameterType="actionRecord" resultMap="videoActionRecordMap">
        select ar.var_id, ar.UID, (case when (ar.UID = 0) then ar.ip else u.nickname end) as nickname, u.sex, u.head_photo, u.gid, ar.ip,
        (case when (ar.liked > 0) then true else false end) as liked, (case when (ar.like_at = 0) then null else ar.like_at end) as like_at,
        (case when (ar.commented > 0) then true else false end) as commented, (case when (ar.comment_at = 0) then null else ar.comment_at end) as comment_at,
        (case when (ad.vad_id is not null) then true else false end) as accessed, ad.last_access_time as access_at,
        ad.vad_id, ad.first_access_path, ad.first_access_referer, ad.first_access_time,
        ad.last_access_time, ad.last_access_ip, ad.last_access_user_agent, ad.access_times, ad.deep,
        v.video_id, v.uid as author_uid , vu.nickname as author_nickname, vu.sex as author_sex, vu.head_photo as author_head_photo,
        v.cover_id, p.album_id, p.path as p_path, p.width as p_width, p.height as p_height, p.image_type,
        v.name, v.description, v.tags, v.source_type, v.path, v.code, v.width, v.height, v.size, v.video_type,
        v.upload_time, v.originName, v.refer, v.permission, v.rotate, v.click_count, v.like_count, v.comment_count
        from ((video_action_record ar left join video_access_detail ad on ar.var_id = ad.var_id) left join user u on ar.uid = u.uid)
        left join ((video v left join user vu on v.uid = vu.uid) left join photo p on v.cover_id = p.photo_id)
        on ar.video_id = v.video_id
        <where>
            <choose>
                <when test="(ar_id != null and ar_id > 0) or (creation != null and creation.video_id != null and ((user != null and user.uid != null and user.uid > 0) or (ip != null and ip != '')))">
                    <choose>
                        <when test="ar_id != null and ar_id > 0">
                            and ar.var_id = #{ar_id}
                        </when>
                        <otherwise>
                            <choose>
                                <when test="user != null and user.uid != null and user.uid > 0">
                                    and ar.video_id = #{creation.video_id} and ar.UID = #{user.uid}
                                </when>
                                <otherwise>
                                    and ar.video_id = #{creation.video_id} and ar.UID = 0 and ar.ip = #{ip}
                                </otherwise>
                            </choose>
                        </otherwise>
                    </choose>
                </when>
                <otherwise>
                    1 != 1
                </otherwise>
            </choose>
        </where>
    </select>

    <select id="findSimpleVideoActionRecord" parameterType="actionRecord" resultType="actionRecord">
        select ar.var_id as ar_id from video_action_record ar
        <where>
            <choose>
                <when test="(ar_id != null and ar_id > 0) or (creation != null and creation.video_id != null and ((user != null and user.uid != null and user.uid > 0) or (ip != null and ip != '')))">
                    <choose>
                        <when test="ar_id != null and ar_id > 0">
                            and ar.var_id = #{ar_id}
                        </when>
                        <otherwise>
                            <choose>
                                <when test="user != null and user.uid != null and user.uid > 0">
                                    and ar.video_id = #{creation.video_id} and ar.UID = #{user.uid}
                                </when>
                                <otherwise>
                                    and ar.video_id = #{creation.video_id} and ar.UID = 0 and ar.ip = #{ip}
                                </otherwise>
                            </choose>
                        </otherwise>
                    </choose>
                </when>
                <otherwise>
                    1 != 1
                </otherwise>
            </choose>
        </where>
        limit 1
    </select>

    <select id="findVideoActionRecordList" parameterType="hashMap" resultMap="videoActionRecordMap">
        <bind name="is_login" value="loginUser != null and loginUser.uid != null and loginUser.uid > 0"/>
        select ar.var_id, ar.UID, (case when (ar.UID = 0) then ar.ip else u.nickname end) as nickname, u.sex, u.head_photo, u.gid, ar.ip,
        (case when (ar.liked > 0) then true else false end) as liked, (case when (ar.like_at = 0) then null else ar.like_at end) as like_at,
        (case when (ar.commented > 0) then true else false end) as commented, (case when (ar.comment_at = 0) then null else ar.comment_at end) as comment_at,
        (case when (ad.vad_id is not null) then true else false end) as accessed, ad.last_access_time as access_at,
        ad.vad_id, ad.first_access_path, ad.first_access_referer, ad.first_access_time,
        ad.last_access_time, ad.last_access_ip, ad.last_access_user_agent, ad.access_times, ad.deep,
        v.video_id, v.uid as author_uid , vu.nickname as author_nickname, vu.sex as author_sex, vu.head_photo as author_head_photo,
        v.cover_id, p.album_id, p.path as p_path, p.width as p_width, p.height as p_height, p.image_type,
        v.name, v.description, v.tags, v.source_type, v.path, v.code, v.width, v.height, v.size, v.video_type,
        v.upload_time, v.refer, v.permission, v.rotate, v.click_count, v.like_count, v.comment_count,
        <if test="is_login">
            (case when v.uid = #{loginUser.uid} then v.originName else null end) as originName,
        </if>
        st.st_id, st.uid as st_uid, st.video_id as st_video_id, st.name as st_name, st.lang as st_lang, st.mime_type as st_mime_type, st.path as st_path, st.upload_time as st_upload_time
        from ((video_action_record ar left join video_access_detail ad on ar.var_id = ad.var_id) left join user u on ar.uid = u.uid)
        left join (((
        (select all_v.* from video all_v
        <where>
            <choose>
                <when test="is_login and loginUser.userGroup.gid == '-1'">
                    and (1 = 1)
                </when>
                <when test="is_login">
                    and (
                    all_v.uid = #{loginUser.uid}
                    or
                    (
                    (all_v.permission = 0 or all_v.permission = 1)
                    or
                    (all_v.permission = 2 or all_v.permission = 3)
                    or
                    ((all_v.permission = 4 or all_v.permission = 5) and all_v.uid in (select following.fuid from
                    user_follow following where following.uid = #{loginUser.uid}))
                    or
                    ((all_v.permission = 6 or all_v.permission = 7) and all_v.uid in (select follower.uid from
                    user_follow follower where follower.fuid = #{loginUser.uid}))
                    or
                    ((all_v.permission = 8 or all_v.permission = 9) and all_v.uid in (select friend.uid from friends
                    friend where friend.fid = #{loginUser.uid}))
                    )
                    )
                </when>
                <otherwise>
                    and (all_v.permission = 0 or all_v.permission = 1)
                </otherwise>
            </choose>
        </where>
        ) v left join user vu on v.uid = vu.uid) left join photo p on v.cover_id = p.photo_id) left join video_subtitle st on v.video_id = st.video_id)
        on ar.video_id = v.video_id
        <where>
            <if test="condition.user != null and condition.user.uid != null">
                and ar.UID = #{condition.user.uid}
            </if>
            <if test="condition.creation != null">
                <if test="condition.creation.video_id != null and condition.creation.video_id > 0">
                    and ar.video_id = #{condition.creation.video_id}
                </if>
            </if>
            <if test="condition.ip != null and condition.ip != ''">
                and ar.ip = #{condition.ip}
            </if>
            <if test="condition.liked">
                and ar.liked > 0
            </if>
            <if test="condition.commented">
                and ar.commented > 0
            </if>
            <if test="condition.accessed">
                and (ad.vad_id is not null)
            </if>
            <if test="condition.accessDetail != null">
                <if test="condition.accessDetail.deep != null and condition.accessDetail.deep > 0">
                    and ad.deep = #{condition.deep}
                </if>
                <if test="condition.accessDetail.last_access_ip != null and condition.accessDetail.last_access_ip != ''">
                    and ad.last_access_ip = #{condition.last_access_ip}
                </if>
            </if>
        </where>
        <choose>
            <when test="condition.liked">
                order by ar.like_at desc
            </when>
            <when test="condition.commented">
                order by ar.comment_at desc
            </when>
            <when test="condition.accessed">
                order by ar.access_at desc
            </when>
            <otherwise>
                order by ar.var_id desc
            </otherwise>
        </choose>
    </select>

    <insert id="saveVideoActionRecord" parameterType="actionRecord" useGeneratedKeys="true" keyProperty="ar_id" keyColumn="var_id">
        insert into video_action_record (UID, ip, video_id, liked, like_at, commented, comment_at)
        values (#{user.uid}, #{ip}, #{creation.video_id}, #{liked}, #{like_at}, #{commented}, #{comment_at})
    </insert>

    <update id="updateVideoActionRecord" parameterType="actionRecord">
        update video_action_record ar
        <set>
            <if test="liked != null">
                liked = (case when #{liked} then 1 else 0 end),
            </if>
            <if test="like_at != null">
                like_at = #{like_at}
            </if>
            <if test="commented != null">
                commented = (case when #{commented} then 1 else 0 end),
            </if>
            <if test="comment_at != null">
                comment_at = #{comment_at}
            </if>
        </set>
        <where>
            <choose>
                <when test="(ar_id != null and ar_id > 0) or (creation != null and creation.video_id != null and ((user != null and user.uid != null and user.uid > 0) or (ip != null and ip != '')))">
                    <choose>
                        <when test="ar_id != null and ar_id > 0">
                            and ar.var_id = #{ar_id}
                        </when>
                        <otherwise>
                            <choose>
                                <when test="user != null and user.uid != null and user.uid > 0">
                                    and ar.video_id = #{creation.video_id} and ar.UID = #{user.uid}
                                </when>
                                <otherwise>
                                    and ar.video_id = #{creation.video_id} and ar.UID = 0 and ar.ip = #{ip}
                                </otherwise>
                            </choose>
                        </otherwise>
                    </choose>
                </when>
                <otherwise>
                    1 != 1
                </otherwise>
            </choose>
        </where>
    </update>

    <select id="findSimpleVideoAccessDetail" parameterType="accessDetail" resultType="accessDetail">
        select var_id as ar_id, first_access_path, first_access_referer, first_access_time,
        last_access_time, last_access_ip, last_access_user_agent, access_times, deep
        from video_access_detail
        where var_id = #{ar_id}
        limit 1
    </select>

    <insert id="saveVideoAccessDetail" parameterType="accessDetail">
        insert into video_access_detail (var_id, first_access_path, first_access_referer, first_access_time,
        last_access_time, last_access_ip, last_access_user_agent, access_times, deep)
        values (#{ar_id}, #{first_access_path}, #{first_access_referer}, #{first_access_time},
        #{last_access_time}, #{last_access_ip}, #{last_access_user_agent}, #{access_times}, #{deep})
    </insert>

    <update id="updateVideoAccessDetail" parameterType="accessDetail">
        update video_access_detail set last_access_time = #{last_access_time}, last_access_ip = #{last_access_ip},
        last_access_user_agent = #{last_access_user_agent}, access_times = #{access_times}, deep = #{deep}
        where var_id = #{ar_id}
    </update>

    <delete id="deleteVideoAccessDetail" parameterType="accessDetail">
        delete from video_access_detail where var_id = #{ar_id}
    </delete>

    <resultMap id="videoActionRecordMap" type="actionRecord">
        <id column="var_id" property="ar_id"/>
        <id column="ip" property="ip"/>
        <result column="liked" property="liked"/>
        <result column="like_at" property="like_at"/>
        <result column="commented" property="commented"/>
        <result column="comment_at" property="comment_at"/>
        <result column="accessed" property="accessed"/>
        <result column="access_at" property="access_at"/>
        <association property="user" column="uid" javaType="user">
            <result column="uid" property="uid"/>
            <result column="nickname" property="nickname"/>
            <result column="sex" property="sex"/>
            <result column="head_photo" property="head_photo"/>
        </association>
        <association property="creation" column="video_id" javaType="video">
            <result column="video_id" property="video_id"/>
            <result column="name" property="name"/>
            <result column="description" property="description"/>
            <result column="tags" property="tags"/>
            <result column="source_type" property="source_type"/>
            <result column="path" property="path"/>
            <result column="code" property="code"/>
            <result column="width" property="width"/>
            <result column="height" property="height"/>
            <result column="size" property="size"/>
            <result column="video_type" property="video_type"/>
            <result column="upload_time" property="upload_time" javaType="java.util.Date" jdbcType="BIGINT"
                    typeHandler="site.imcoder.blog.dao.typehandler.DateTypeHandler"/>
            <result column="originName" property="originName"/>
            <result column="refer" property="refer"/>
            <result column="permission" property="permission"/>
            <result column="rotate" property="rotate"/>
            <result column="click_count" property="click_count"/>
            <result column="like_count" property="like_count"/>
            <result column="comment_count" property="comment_count"/>
            <association property="user" column="author_uid" javaType="user">
                <result column="author_uid" property="uid"/>
                <result column="author_nickname" property="nickname"/>
                <result column="author_sex" property="sex"/>
                <result column="author_head_photo" property="head_photo"/>
            </association>
            <association column="cover_id" property="cover" javaType="photo">
                <result column="cover_id" property="photo_id"/>
                <result column="album_id" property="album_id"/>
                <result column="p_path" property="path"/>
                <result column="p_width" property="width"/>
                <result column="p_height" property="height"/>
                <result column="image_type" property="image_type"/>
            </association>
            <collection property="subtitles" javaType="ArrayList" column="st_id" ofType="subtitle">
                <id column="st_id" property="st_id"/>
                <result column="st_name" property="name"/>
                <result column="st_lang" property="lang"/>
                <result column="st_mime_type" property="mime_type"/>
                <result column="st_path" property="path"/>
                <result column="st_upload_time" property="upload_time"/>
                <result column="st_video_id" property="video_id"/>
                <result column="st_uid" property="uid"/>
            </collection>
        </association>
        <association property="accessDetail" column="vad_id" javaType="accessDetail">
            <result column="first_access_path" property="first_access_path"/>
            <result column="first_access_referer" property="first_access_referer"/>
            <result column="first_access_time" property="first_access_time"/>
            <result column="last_access_time" property="last_access_time"/>
            <result column="last_access_ip" property="last_access_ip"/>
            <result column="last_access_user_agent" property="last_access_user_agent"/>
            <result column="access_times" property="access_times"/>
            <result column="deep" property="deep"/>
        </association>
    </resultMap>
    <!-- 视频动作记录 end -->

    <!-- 照片动作记录 start -->
    <select id="findPhotoActionRecord" parameterType="actionRecord" resultMap="photoActionRecordMap">
        select ar.par_id, ar.UID, (case when (ar.UID = 0) then ar.ip else u.nickname end) as nickname, u.sex, u.head_photo, u.gid, ar.ip,
        (case when (ar.liked > 0) then true else false end) as liked, (case when (ar.like_at = 0) then null else ar.like_at end) as like_at,
        (case when (ar.commented > 0) then true else false end) as commented, (case when (ar.comment_at = 0) then null else ar.comment_at end) as comment_at,
        (case when (ad.pad_id is not null) then true else false end) as accessed, ad.last_access_time as access_at,
        ad.pad_id, ad.first_access_path, ad.first_access_referer, ad.first_access_time,
        ad.last_access_time, ad.last_access_ip, ad.last_access_user_agent, ad.access_times, ad.deep,
        p.photo_id, p.uid as author_uid, p.album_id, p.name, p.path, p.description, p.tags, p.upload_time, p.width,
        p.height, p.size, p.image_type, p.originName, p.refer, p.click_count, p.like_count, p.comment_count,
        t.ptwid, t.name as tname, t.permission as tpermission, t.scope
        from ((photo_action_record ar left join photo_access_detail ad on ar.par_id = ad.par_id) left join user u on ar.uid = u.uid)
        left join ((photo p left join album a on p.album_id = a.album_id) left join photo_tag_wrapper t on p.topic = t.ptwid)
        on ar.photo_id = p.photo_id
        <where>
            <choose>
                <when test="(ar_id != null and ar_id > 0) or (creation != null and creation.photo_id != null and ((user != null and user.uid != null and user.uid > 0) or (ip != null and ip != '')))">
                    <choose>
                        <when test="ar_id != null and ar_id > 0">
                            and ar.par_id = #{ar_id}
                        </when>
                        <otherwise>
                            <choose>
                                <when test="user != null and user.uid != null and user.uid > 0">
                                    and ar.photo_id = #{creation.photo_id} and ar.UID = #{user.uid}
                                </when>
                                <otherwise>
                                    and ar.photo_id = #{creation.photo_id} and ar.UID = 0 and ar.ip = #{ip}
                                </otherwise>
                            </choose>
                        </otherwise>
                    </choose>
                </when>
                <otherwise>
                    1 != 1
                </otherwise>
            </choose>
        </where>
        limit 1
    </select>

    <select id="findSimplePhotoActionRecord" parameterType="actionRecord" resultType="actionRecord">
        select ar.par_id as ar_id from photo_action_record ar
        <where>
            <choose>
                <when test="(ar_id != null and ar_id > 0) or (creation != null and creation.photo_id != null and ((user != null and user.uid != null and user.uid > 0) or (ip != null and ip != '')))">
                    <choose>
                        <when test="ar_id != null and ar_id > 0">
                            and ar.par_id = #{ar_id}
                        </when>
                        <otherwise>
                            <choose>
                                <when test="user != null and user.uid != null and user.uid > 0">
                                    and ar.photo_id = #{creation.photo_id} and ar.UID = #{user.uid}
                                </when>
                                <otherwise>
                                    and ar.photo_id = #{creation.photo_id} and ar.UID = 0 and ar.ip = #{ip}
                                </otherwise>
                            </choose>
                        </otherwise>
                    </choose>
                </when>
                <otherwise>
                    1 != 1
                </otherwise>
            </choose>
        </where>
        limit 1
    </select>

    <select id="findPhotoActionRecordList" parameterType="hashMap" resultMap="photoActionRecordMap">
        <bind name="is_login" value="loginUser != null and loginUser.uid != null and loginUser.uid > 0"/>
        select ar.par_id, ar.UID, (case when (ar.UID = 0) then ar.ip else u.nickname end) as nickname, u.sex, u.head_photo, u.gid, ar.ip,
        (case when (ar.liked > 0) then true else false end) as liked, (case when (ar.like_at = 0) then null else ar.like_at end) as like_at,
        (case when (ar.commented > 0) then true else false end) as commented, (case when (ar.comment_at = 0) then null else ar.comment_at end) as comment_at,
        (case when (ad.pad_id is not null) then true else false end) as accessed, ad.last_access_time as access_at,
        ad.pad_id, ad.first_access_path, ad.first_access_referer, ad.first_access_time,
        ad.last_access_time, ad.last_access_ip, ad.last_access_user_agent, ad.access_times, ad.deep,
        p.photo_id, p.uid as author_uid, p.album_id, p.name, p.path, p.description, p.tags, p.upload_time, p.width,
        p.height, p.size, p.image_type, p.refer, p.click_count, p.like_count, p.comment_count,
        <if test="is_login">
            (case when p.uid = #{loginUser.uid} then p.originName else null end) as originName,
        </if>
        t.ptwid, t.name as tname, t.permission as tpermission, t.scope
        from ((photo_action_record ar left join photo_access_detail ad on ar.par_id = ad.par_id) left join user u on ar.uid = u.uid)
        left join ((
        (select all_p.* from (photo all_p left join album a on all_p.album_id = a.album_id)
        <where>
            <choose>
                <when test="is_login and loginUser.userGroup.gid == '-1'">
                    and (1 = 1)
                </when>
                <when test="is_login">
                    and (
                    a.uid = #{loginUser.uid}
                    or
                    (
                    (a.permission = 0 or a.permission = 1)
                    or
                    (a.permission = 2 or a.permission = 3)
                    or
                    ((a.permission = 4 or a.permission = 5) and a.uid in (select following.fuid from user_follow
                    following where following.uid = #{loginUser.uid}))
                    or
                    ((a.permission = 6 or a.permission = 7) and a.uid in (select follower.uid from user_follow follower
                    where follower.fuid = #{loginUser.uid}))
                    or
                    ((a.permission = 8 or a.permission = 9) and a.uid in (select friend.uid from friends friend where
                    friend.fid = #{loginUser.uid}))
                    )
                    )
                </when>
                <otherwise>
                    and (a.permission = 0 or a.permission = 1)
                </otherwise>
            </choose>
        </where>
        ) p left join album a on p.album_id = a.album_id) left join photo_tag_wrapper t on p.topic = t.ptwid)
        on ar.photo_id = p.photo_id
        <where>
            <if test="condition.user != null and condition.user.uid != null">
                and ar.UID = #{condition.user.uid}
            </if>
            <if test="condition.creation != null">
                <if test="condition.creation.photo_id != null and condition.creation.photo_id > 0">
                    and ar.photo_id = #{condition.creation.photo_id}
                </if>
            </if>
            <if test="condition.ip != null and condition.ip != ''">
                and ar.ip = #{condition.ip}
            </if>
            <if test="condition.liked">
                and ar.liked > 0
            </if>
            <if test="condition.commented">
                and ar.commented > 0
            </if>
            <if test="condition.accessed">
                and (ad.pad_id is not null)
            </if>
            <if test="condition.accessDetail != null">
                <if test="condition.accessDetail.deep != null and condition.accessDetail.deep > 0">
                    and ad.deep = #{condition.deep}
                </if>
                <if test="condition.accessDetail.last_access_ip != null and condition.accessDetail.last_access_ip != ''">
                    and ad.last_access_ip = #{condition.last_access_ip}
                </if>
            </if>
        </where>
        <choose>
            <when test="condition.liked">
                order by ar.like_at desc
            </when>
            <when test="condition.commented">
                order by ar.comment_at desc
            </when>
            <when test="condition.accessed">
                order by ar.access_at desc
            </when>
            <otherwise>
                order by ar.par_id desc
            </otherwise>
        </choose>
    </select>

    <insert id="savePhotoActionRecord" parameterType="actionRecord" useGeneratedKeys="true" keyProperty="ar_id" keyColumn="par_id">
        insert into photo_action_record (UID, ip, photo_id, liked, like_at, commented, comment_at)
        values (#{user.uid}, #{ip}, #{creation.photo_id}, #{liked}, #{like_at}, #{commented}, #{comment_at})
    </insert>

    <update id="updatePhotoActionRecord" parameterType="actionRecord">
        update photo_action_record ar
        <set>
            <if test="liked != null">
                liked = (case when #{liked} then 1 else 0 end),
            </if>
            <if test="like_at != null">
                like_at = #{like_at}
            </if>
            <if test="commented != null">
                commented = (case when #{commented} then 1 else 0 end),
            </if>
            <if test="comment_at != null">
                comment_at = #{comment_at}
            </if>
        </set>
        <where>
            <choose>
                <when test="(ar_id != null and ar_id > 0) or (creation != null and creation.photo_id != null and ((user != null and user.uid != null and user.uid > 0) or (ip != null and ip != '')))">
                    <choose>
                        <when test="ar_id != null and ar_id > 0">
                            and ar.par_id = #{ar_id}
                        </when>
                        <otherwise>
                            <choose>
                                <when test="user != null and user.uid != null and user.uid > 0">
                                    and ar.photo_id = #{creation.photo_id} and ar.UID = #{user.uid}
                                </when>
                                <otherwise>
                                    and ar.photo_id = #{creation.photo_id} and ar.UID = 0 and ar.ip = #{ip}
                                </otherwise>
                            </choose>
                        </otherwise>
                    </choose>
                </when>
                <otherwise>
                    1 != 1
                </otherwise>
            </choose>
        </where>
    </update>

    <select id="findSimplePhotoAccessDetail" parameterType="accessDetail" resultType="accessDetail">
        select par_id as ar_id, first_access_path, first_access_referer, first_access_time,
        last_access_time, last_access_ip, last_access_user_agent, access_times, deep
        from photo_access_detail
        where par_id = #{ar_id}
        limit 1
    </select>

    <insert id="savePhotoAccessDetail" parameterType="accessDetail">
        insert into photo_access_detail (par_id, first_access_path, first_access_referer, first_access_time,
        last_access_time, last_access_ip, last_access_user_agent, access_times, deep)
        values (#{ar_id}, #{first_access_path}, #{first_access_referer}, #{first_access_time},
        #{last_access_time}, #{last_access_ip}, #{last_access_user_agent}, #{access_times}, #{deep})
    </insert>

    <update id="updatePhotoAccessDetail" parameterType="accessDetail">
        update photo_access_detail set last_access_time = #{last_access_time}, last_access_ip = #{last_access_ip},
        last_access_user_agent = #{last_access_user_agent}, access_times = #{access_times}, deep = #{deep}
        where par_id = #{ar_id}
    </update>

    <delete id="deletePhotoAccessDetail" parameterType="accessDetail">
        delete from photo_access_detail where par_id = #{ar_id}
    </delete>

    <resultMap id="photoActionRecordMap" type="actionRecord">
        <id column="par_id" property="ar_id"/>
        <id column="ip" property="ip"/>
        <result column="liked" property="liked"/>
        <result column="like_at" property="like_at"/>
        <result column="commented" property="commented"/>
        <result column="comment_at" property="comment_at"/>
        <result column="accessed" property="accessed"/>
        <result column="access_at" property="access_at"/>
        <association property="user" column="uid" javaType="user">
            <result column="uid" property="uid"/>
            <result column="nickname" property="nickname"/>
            <result column="sex" property="sex"/>
            <result column="head_photo" property="head_photo"/>
        </association>
        <association property="creation" column="photo_id" javaType="photo">
            <result column="photo_id" property="photo_id"/>
            <result column="author_uid" property="uid"/>
            <result column="album_id" property="album_id"/>
            <result column="name" property="name"/>
            <result column="path" property="path"/>
            <result column="description" property="description"/>
            <result column="tags" property="tags"/>
            <result column="upload_time" property="upload_time" javaType="java.util.Date" jdbcType="BIGINT"
                    typeHandler="site.imcoder.blog.dao.typehandler.DateTypeHandler"/>
            <result column="width" property="width"/>
            <result column="height" property="height"/>
            <result column="size" property="size"/>
            <result column="image_type" property="image_type"/>
            <result column="originName" property="originName"/>
            <result column="refer" property="refer"/>
            <result column="click_count" property="click_count"/>
            <result column="like_count" property="like_count"/>
            <result column="comment_count" property="comment_count"/>
            <association column="ptwid" property="topic" javaType="photoTagWrapper">
                <result column="ptwid" property="ptwid"/>
                <result column="tname" property="name"/>
                <result column="tpermission" property="permission"/>
                <result column="scope" property="scope"/>
                <result column="tdescription" property="description"/>
            </association>
        </association>
        <association property="accessDetail" column="pad_id" javaType="accessDetail">
            <result column="first_access_path" property="first_access_path"/>
            <result column="first_access_referer" property="first_access_referer"/>
            <result column="first_access_time" property="first_access_time"/>
            <result column="last_access_time" property="last_access_time"/>
            <result column="last_access_ip" property="last_access_ip"/>
            <result column="last_access_user_agent" property="last_access_user_agent"/>
            <result column="access_times" property="access_times"/>
            <result column="deep" property="deep"/>
        </association>
    </resultMap>
    <!-- 照片动作记录 end -->

    <!-- 评论动作记录 start -->
    <select id="findCommentActionRecord" parameterType="actionRecord" resultMap="commentActionRecordMap">
        select ar.car_id, ar.UID, (case when (ar.UID = 0) then ar.ip else u.nickname end) as nickname, u.sex, u.head_photo, u.gid, ar.ip,
        (case when (ar.liked > 0) then true else false end) as liked, (case when (ar.like_at = 0) then null else ar.like_at end) as like_at,
        (case when (ar.commented > 0) then true else false end) as commented, (case when (ar.comment_at = 0) then null else ar.comment_at end) as comment_at,
        c.cid, c.main_type, c.main_id, c.r_cid, c.send_time, c.anonymous, c.like_count,
        cu.uid as comment_user_uid, cu.nickname as comment_user_nickname, cu.head_photo as comment_user_head_photo, cu.sex as comment_user_sex
        from ((comment_action_record ar) left join user u on ar.uid = u.uid)
        left join (comment c left join user cu on c.uid = cu.uid)
        on ar.cid = c.cid
        <where>
            <choose>
                <when test="(ar_id != null and ar_id > 0) or (creation != null and creation.cid != null and ((user != null and user.uid != null and user.uid > 0) or (ip != null and ip != '')))">
                    <choose>
                        <when test="ar_id != null and ar_id > 0">
                            and ar.car_id = #{ar_id}
                        </when>
                        <otherwise>
                            <choose>
                                <when test="user != null and user.uid != null and user.uid > 0">
                                    and ar.cid = #{creation.cid} and ar.UID = #{user.uid}
                                </when>
                                <otherwise>
                                    and ar.cid = #{creation.cid} and ar.UID = 0 and ar.ip = #{ip}
                                </otherwise>
                            </choose>
                        </otherwise>
                    </choose>
                </when>
                <otherwise>
                    1 != 1
                </otherwise>
            </choose>
        </where>
        limit 1
    </select>

    <select id="findSimpleCommentActionRecord" parameterType="actionRecord" resultType="actionRecord">
        select ar.car_id as ar_id from comment_action_record ar
        <where>
            <choose>
                <when test="(ar_id != null and ar_id > 0) or (creation != null and creation.cid != null and ((user != null and user.uid != null and user.uid > 0) or (ip != null and ip != '')))">
                    <choose>
                        <when test="ar_id != null and ar_id > 0">
                            and ar.car_id = #{ar_id}
                        </when>
                        <otherwise>
                            <choose>
                                <when test="user != null and user.uid != null and user.uid > 0">
                                    and ar.cid = #{creation.cid} and ar.UID = #{user.uid}
                                </when>
                                <otherwise>
                                    and ar.cid = #{creation.cid} and ar.UID = 0 and ar.ip = #{ip}
                                </otherwise>
                            </choose>
                        </otherwise>
                    </choose>
                </when>
                <otherwise>
                    1 != 1
                </otherwise>
            </choose>
        </where>
        limit 1
    </select>

    <select id="findCommentActionRecordList" parameterType="hashMap" resultMap="commentActionRecordMap">
        select ar.car_id, ar.UID, (case when (ar.UID = 0) then ar.ip else u.nickname end) as nickname, u.sex, u.head_photo, u.gid, ar.ip,
        (case when (ar.liked > 0) then true else false end) as liked, (case when (ar.like_at = 0) then null else ar.like_at end) as like_at,
        (case when (ar.commented > 0) then true else false end) as commented, (case when (ar.comment_at = 0) then null else ar.comment_at end) as comment_at,
        c.cid, c.main_type, c.main_id, c.r_cid, c.send_time, c.anonymous, c.like_count,
        cu.uid as comment_user_uid, cu.nickname as comment_user_nickname, cu.head_photo as comment_user_head_photo, cu.sex as comment_user_sex
        from ((comment_action_record ar) left join user u on ar.uid = u.uid)
        left join (comment c left join user cu on c.uid = cu.uid)
        on ar.cid = c.cid
        <where>
            <if test="condition.user != null and condition.user.uid != null">
                and ar.UID = #{condition.user.uid}
            </if>
            <if test="condition.creation != null">
                <if test="condition.creation.cid != null and condition.creation.cid > 0">
                    and ar.cid = #{condition.creation.cid}
                </if>
            </if>
            <if test="condition.ip != null and condition.ip != ''">
                and ar.ip = #{condition.ip}
            </if>
            <if test="condition.liked">
                and ar.liked > 0
            </if>
            <if test="condition.commented">
                and ar.commented > 0
            </if>
        </where>
        <choose>
            <when test="condition.liked">
                order by ar.like_at desc
            </when>
            <when test="condition.commented">
                order by ar.comment_at desc
            </when>
            <otherwise>
                order by ar.car_id desc
            </otherwise>
        </choose>
    </select>

    <insert id="saveCommentActionRecord" parameterType="actionRecord" useGeneratedKeys="true" keyProperty="ar_id" keyColumn="car_id">
        insert into comment_action_record (UID, ip, cid, liked, like_at, commented, comment_at)
        values (#{user.uid}, #{ip}, #{creation.cid}, #{liked}, #{like_at}, #{commented}, #{comment_at})
    </insert>

    <update id="updateCommentActionRecord" parameterType="actionRecord">
        update comment_action_record ar
        <set>
            <if test="liked != null">
                liked = (case when #{liked} then 1 else 0 end),
            </if>
            <if test="like_at != null">
                like_at = #{like_at}
            </if>
            <if test="commented != null">
                commented = (case when #{commented} then 1 else 0 end),
            </if>
            <if test="comment_at != null">
                comment_at = #{comment_at}
            </if>
        </set>
        <where>
            <choose>
                <when test="(ar_id != null and ar_id > 0) or (creation != null and creation.cid != null and ((user != null and user.uid != null and user.uid > 0) or (ip != null and ip != '')))">
                    <choose>
                        <when test="ar_id != null and ar_id > 0">
                            and ar.car_id = #{ar_id}
                        </when>
                        <otherwise>
                            <choose>
                                <when test="user != null and user.uid != null and user.uid > 0">
                                    and ar.cid = #{creation.cid} and ar.UID = #{user.uid}
                                </when>
                                <otherwise>
                                    and ar.cid = #{creation.cid} and ar.UID = 0 and ar.ip = #{ip}
                                </otherwise>
                            </choose>
                        </otherwise>
                    </choose>
                </when>
                <otherwise>
                    1 != 1
                </otherwise>
            </choose>
        </where>
    </update>

    <resultMap id="commentActionRecordMap" type="actionRecord">
        <id column="car_id" property="ar_id"/>
        <id column="ip" property="ip"/>
        <result column="liked" property="liked"/>
        <result column="like_at" property="like_at"/>
        <result column="commented" property="commented"/>
        <result column="comment_at" property="comment_at"/>
        <association property="user" column="uid" javaType="user">
            <result column="uid" property="uid"/>
            <result column="nickname" property="nickname"/>
            <result column="sex" property="sex"/>
            <result column="head_photo" property="head_photo"/>
        </association>
        <association property="creation" column="cid" javaType="comment">
            <id column="cid" property="cid"/>
            <result column="main_type" property="mainType"/>
            <result column="main_id" property="mainId"/>
            <result column="r_cid" property="parentId"/>
            <result column="content" property="content"/>
            <result column="send_time" property="send_time"/>
            <result column="anonymous" property="anonymous"/>
            <result column="like_count" property="like_count"/>
            <association property="user" javaType="user">
                <result column="comment_user_uid" property="uid"/>
                <result column="comment_user_nickname" property="nickname"/>
                <result column="comment_user_head_photo" property="head_photo"/>
                <result column="comment_user_sex" property="sex"/>
            </association>
        </association>
    </resultMap>
    <!-- 评论动作记录 end -->

</mapper>