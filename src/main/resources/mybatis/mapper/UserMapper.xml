<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="user">

    <delete id="deleteUser" parameterType="int">
        delete from user where uid=#{uid}
    </delete>

    <!-- 查询所有 -->
    <select id="findUserList" resultType="user" parameterType="hashmap">
        select * from user
        <!-- 查询时拼装条件 -->
        <if test="condition != null">
            <where>
                <if test="uid>0">and uid=#{condition.uid}</if>
                <if test="nickname!=null and nickname!=''">and nickname like concat('%', #{condition.nickname} ,'%')
                </if>
                <if test="username!=null and username!=''">and username=#{condition.username}</if>
            </where>
        </if>
        limit #{startRow},#{pageSize}
    </select>

    <!-- 查询总行数 -->
    <select id="findUserListCount" resultType="int" parameterType="user">
        select count(*) from user
        <if test="condition != null">
            <where>
                <if test="uid>0">and uid=#{condition.uid}</if>
                <if test="nickname!=null and nickname!=''">and nickname like concat('%', #{condition.nickname} ,'%')
                </if>
                <if test="username!=null and username!=''">and username=#{condition.username}</if>
            </where>
        </if>
    </select>

    <!-- 保存 -->
    <insert id="saveUser" parameterType="user" useGeneratedKeys="true" keyProperty="uid">
        insert into user(gid,nickname,phone,sex,email,description,head_photo,qq)
        values(#{userGroup.gid},#{nickname},#{phone},#{sex},#{email},#{description},#{head_photo},#{qq})
    </insert>

    <!-- 保存 个人资料-->
    <update id="updateUserProfile" parameterType="user">
        update user set
        head_photo=#{head_photo},nickname=#{nickname},phone=#{phone},sex=#{sex},description=#{description},qq=#{qq},weibo=#{weibo},site=#{site},address=#{address},birthday=#{birthday},says=#{says}
        where uid = #{uid}
    </update>

    <resultMap id="userMap" type="user">
        <result column="uid" property="uid"/>
        <result column="nickname" property="nickname"/>
        <result column="phone" property="phone"/>
        <result column="sex" property="sex"/>
        <result column="email" property="email"/>
        <result column="address" property="address"/>
        <result column="birthday" property="birthday"/>
        <result column="description" property="description"/>
        <result column="head_photo" property="head_photo"/>
        <result column="qq" property="qq"/>
        <result column="weibo" property="weibo"/>
        <result column="site" property="site"/>
        <result column="says" property="says"/>
        <association property="userGroup" column="gid" javaType="userGroup">
            <result column="gid" property="gid"/>
            <result column="group_name" property="group_name"/>
        </association>
        <association property="userStatus" javaType="userStatus">
            <result column="uid" property="uid"/>
            <result column="lock_status" property="lock_status"/>
            <result column="register_ip" property="register_ip"/>
            <result column="register_time" property="register_time" javaType="java.util.Date" jdbcType="BIGINT"/>
            <result column="last_login_ip" property="last_login_ip"/>
            <result column="last_login_time" property="last_login_time" javaType="java.util.Date" jdbcType="BIGINT"/>
        </association>
    </resultMap>

    <!-- 根据ID查询 -->
    <select id="findUser" parameterType="user" resultMap="userMap">
        select
        u.uid,nickname,phone,sex,email,address,birthday,description,head_photo,qq,weibo,site,says,
        ust.lock_status,ust.register_ip,ust.register_time,ust.last_login_ip,ust.last_login_time,
        ug.gid,ug.group_name
        from (user u left join user_group ug on u.gid=ug.gid) left join user_status ust on u.uid = ust.uid
        where u.uid = #{uid}
        limit 1
    </select>

    <!-- 插入用户配置新行 -->
    <insert id="insertUserSetting" parameterType="userSetting">
        insert into user_setting (uid, receive_notify_email, profile_view_level, page_background) values (#{uid}, #{receiveNotifyEmail}, #{profileViewLevel}, #{pageBackground});
    </insert>

    <!-- 查找用户配置 -->
    <select id="findUserSetting" parameterType="user" resultMap="userSettingMap">
        select uid, receive_notify_email, profile_view_level, page_background from user_setting where uid = #{uid}
    </select>

    <!-- 更新用户配置 -->
    <update id="updateUserSetting" parameterType="userSetting">
        update user_setting set receive_notify_email = #{receiveNotifyEmail}, profile_view_level = #{profileViewLevel}, page_background = #{pageBackground} where uid = #{uid}
    </update>

    <resultMap id="userSettingMap" type="userSetting">
        <result column="uid" property="uid"/>
        <result column="receive_notify_email" property="receiveNotifyEmail"/>
        <result column="profile_view_level" property="profileViewLevel"/>
        <result column="page_background" property="pageBackground"/>
    </resultMap>

    <!-- 插入用户状态新行 -->
    <insert id="insertUserStatus" parameterType="userStatus">
        insert into user_status (uid, lock_status, register_ip, register_time)
        values (#{uid},#{lock_status},
        #{register_ip},#{register_time,javaType=Date,jdbcType=BIGINT,typeHandler=site.imcoder.blog.dao.typehandler.DateTypeHandler})
    </insert>

    <!-- 更新用户状态 -->
    <update id="updateUserStatus" parameterType="userStatus">
        update user_status
        <set>
            <if test="register_ip != null">register_ip = #{register_ip}, </if>
            <if test="register_time != null">register_time = #{register_time,javaType=Date,jdbcType=BIGINT,typeHandler=site.imcoder.blog.dao.typehandler.DateTypeHandler}, </if>
            <if test="last_login_ip != null">last_login_ip = #{last_login_ip}, </if>
            <if test="last_login_time != null">last_login_time = #{last_login_time,javaType=Date,jdbcType=BIGINT,typeHandler=site.imcoder.blog.dao.typehandler.DateTypeHandler}, </if>
        </set>
        <where>
            uid = #{uid}
        </where>
    </update>

    <!-- *************************关注 start********************* -->
    <!-- 检查是否fansUser关注了hostUser -->
    <select id="checkFollow" parameterType="follow" resultType="int">
        select count(*) from user_follow where ( uid=#{uid} and fuid=#{fuid} )
    </select>

    <!-- 保存关注 如果已关注则不插入 由count判断 -->
    <insert id="saveFollow" parameterType="hashMap">
        <selectKey keyProperty="count" resultType="int" order="BEFORE">
            select count(*) from user_follow where ( uid=#{follow.uid} and fuid=#{follow.fuid} )
        </selectKey>
        <if test="count==0">
            insert into user_follow(UID,FUID) values (#{follow.uid},#{follow.fuid})
        </if>
        <if test="count>0">
            select count(*) from user_follow where ( uid=#{follow.uid} and fuid=#{follow.fuid} )
        </if>
    </insert>

    <!-- 查询用户关注列表 -->
    <select id="findFollowList" parameterType="user" resultMap="userMap_contact">
        select uf.fuid as userid,nickname,sex,email,address,birthday,description,head_photo,qq,weibo,says,site,
        ug.gid,ug.group_name
        from user_follow uf left join
        ( user u left join user_group ug on u.gid=ug.gid ) on uf.fuid=u.uid
        <where>
            uf.uid=#{uid}
        </where>
    </select>

    <!-- 查询粉丝关注列表 -->
    <select id="findFansList" parameterType="user" resultMap="userMap_contact">
        select uf.uid as userid,nickname,sex,email,address,birthday,description,head_photo,qq,weibo,says,site,
        ug.gid,ug.group_name
        from user_follow uf left join
        ( user u left join user_group ug on u.gid=ug.gid ) on uf.uid=u.uid
        <where>
            uf.fuid=#{uid}
        </where>
    </select>

    <resultMap id="userMap_contact" type="user">
        <result column="userid" property="uid"/>
        <result column="nickname" property="nickname"/>
        <result column="sex" property="sex"/>
        <result column="email" property="email"/>
        <result column="address" property="address"/>
        <result column="birthday" property="birthday"/>
        <result column="description" property="description"/>
        <result column="head_photo" property="head_photo"/>
        <result column="qq" property="qq"/>
        <result column="weibo" property="weibo"/>
        <result column="site" property="site"/>
        <result column="says" property="says"/>
        <association property="userGroup" javaType="userGroup">
            <result column="gid" property="gid"/>
            <result column="group_name" property="group_name"/>
        </association>
    </resultMap>

    <!-- 删除关注关系 -->
    <delete id="deleteFollow" parameterType="follow">
        delete from user_follow where ( uid=#{uid} and fuid=#{fuid} )
    </delete>

    <!-- *************************关注 end********************* -->

    <!-- *************************好友 start********************* -->
    <!-- 检查是否相互关注 -->
    <select id="checkMutualFollow" parameterType="follow" resultType="int">
        select count(*) as cnt from user_follow where
        ( uid=#{uid} and fuid=#{fuid} ) or ( uid=#{fuid} and fuid=#{uid} )
    </select>

    <!-- 检查是否为好友 -->
    <select id="checkFriendRelationship" parameterType="friend" resultType="int">
        select count(*) as cnt from friends where
        ( uid=#{uid} and fid=#{fid} ) or ( uid=#{fid} and fid=#{uid} )
    </select>

    <!-- 保存好友 -->
    <insert id="beFriend" parameterType="friend">
        insert into friends(UID,FID)
        values(#{uid},#{fid})
    </insert>

    <!-- 查询用户好友 -->
    <select id="findFriendList" parameterType="user" resultMap="userMap_contact">
        select f.fid as userid,nickname,sex,email,address,birthday,description,head_photo,qq,weibo,says,site,
        ug.gid,ug.group_name
        from friends f left join
        ( user u left join user_group ug on u.gid=ug.gid ) on f.fid=u.uid
        <where>
            f.uid=#{uid}
        </where>
    </select>

    <!-- 删除好友关系 -->
    <delete id="deleteFriend" parameterType="friend">
        delete from friends where
        ( uid=#{uid} and fid=#{fid} ) or ( uid=#{fid} and fid=#{uid} )
    </delete>

    <!-- *************************好友 end********************* -->

    <!-- *************************收藏 start********************* -->
    <!-- 检查收藏是否重复 -->
    <select id="checkCollection" parameterType="collect" resultType="int">
        select count(*) from collection where ( uid=#{uid} and aid=#{article_aid} );
    </select>

    <!-- 插入用户收藏表行 -->
    <insert id="saveCollection" parameterType="collect">
        insert into collection(uid,aid,clet_time) values(#{uid},#{article_aid},#{clet_time})
    </insert>

    <!-- 删除用户收藏表行  -->
    <insert id="deleteCollection" parameterType="collect">
        delete from collection where ( uid=#{uid} and aid=#{article_aid} )
    </insert>

    <!-- 查找收藏文章列表 -->
    <select id="findCollectList" parameterType="user" resultMap="collectListMap">
        select coid,c.uid,a.aid,a.title,clet_time,
        u.uid as auid,u.nickname
        from collection c left join
        ( article a left join user u on a.uid = u.uid )
        on c.aid=a.aid
        where c.uid=#{uid}
    </select>

    <resultMap id="collectListMap" type="collect">
        <result column="coid" property="coid"/>
        <result column="uid" property="uid"/>
        <result column="auid" property="author_uid"/>
        <result column="nickname" property="author_nickname"/>
        <result column="aid" property="article_aid"/>
        <result column="title" property="article_title"/>
        <result column="clet_time" property="clet_time"/>
    </resultMap>

    <!-- *************************收藏 end********************* -->
</mapper>