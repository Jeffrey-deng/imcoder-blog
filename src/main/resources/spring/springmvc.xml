<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:websocket="http://www.springframework.org/schema/websocket"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
                        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd">

    <!-- 消息体Converter 入参和出参的对象转换 @ResponseBody @RequestBody -->
    <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
        <!--  supportedMediaTypes作用：
                入参时：当没有指定accept时，通过，指定了时，判断在不在supportedMediaTypes中，在就通过
                出参时：accept指定了，使用accept，指定了@produces，使用@produces，都没有选取supportedMediaTypes中第一个。-->
        <property name="supportedMediaTypes">
            <list>
                <value>text/plain;charset=UTF-8</value>
                <value>text/html;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
        <!-- 是否输出支持的编码，默认true -->
        <property name="writeAcceptCharset" value="false"/>
    </bean>
    <!-- 启动对象转JSON的配置 -->
    <bean id="jacksonMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <!-- 不填写supportedMediaTypes 会报错：HttpMediaTypeNotAcceptableException: Could not find acceptable representation -->
        <property name="supportedMediaTypes">
            <list>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- 快速简写时使用这个
        默认配置了两个bean：RequestMappingHandlerAdapter，RequestMappingHandlerMapping
        并提供了：数据绑定支持，@NumberFormatAnnotation支持，@DateTimeFormat支持，@Valid支持，读写XML的支持（JAXB），读写JSON的支持（Jackson）。
    -->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <ref bean="stringHttpMessageConverter"/>
            <ref bean="jacksonMessageConverter"/>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 声明使用容器默认的Servlet处理来处理的静态资源（没有匹配得上的为静态） -->
    <!-- <mvc:default-servlet-handler/> -->
    <!-- 对静态资源文件的访问 申明使用springMVC来处理静态资源 与上面方法二选一 -->
    <!--  <mvc:resources mapping="/images/**" location="/images/" cache-period="31556926" />
          <mvc:resources mapping="/js/**" location="/js/" cache-period="31556926" />
          <mvc:resources mapping="/css/**" location="/css/" cache-period="31556926" />
    -->

    <!-- 拦截器 -->
    <!--配置拦截器, 多个拦截器,顺序执行 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->
            <!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
            <!-- 如果不定义 mvc:mapping path 将拦截所有的URL请求 -->
            <mvc:mapping path="/**/*.do"/>
            <bean class="site.imcoder.blog.Interceptor.LoginRequiredInterceptor"/>
            <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/**/*.do"/>
            <bean class="site.imcoder.blog.Interceptor.GZIPCompressInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--&lt;!&ndash; Mapping Adapter url映射注解 &ndash;&gt;
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
                <ref bean="stringHttpMessageConverter"/>
                <ref bean="jacksonMessageConverter"/>
			</list>
		</property>
	</bean>-->

    <!-- 处理文件上传 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8"/> <!-- 默认编码 (ISO-8859-1) -->
        <property name="maxInMemorySize" value="10240"/> <!-- 最大内存大小 (10240)-->
        <property name="uploadTempDir" value="/temp"/> <!-- 上传后的目录名 (WebUtils#TEMP_DIR_CONTEXT_ATTRIBUTE) -->
        <property name="maxUploadSize" value="-1"/> <!-- 最大文件大小，-1为无限止(-1) -->
    </bean>

    <!-- 视图解析器 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="suffix" value=".jsp"></property>
        <property name="prefix" value="/WEB-INF/views"></property>
    </bean>

    <!-- 配置webSocket -->
    <!-- 实现配置webSocket接口的类，已经使用注解配置名称了，故注释  -->
    <!--<bean id="notifyService" class="site.imcoder.blog.service.impl.NotifyServiceImpl"/>-->
    <websocket:handlers allowed-origins="*">
        <!-- 前端握手请求地址 -->
        <websocket:mapping path="/socketServer.do" handler="notifyService"/>
        <websocket:handshake-interceptors>
            <bean class="site.imcoder.blog.Interceptor.WebSocketInterceptor"/>
        </websocket:handshake-interceptors>
    </websocket:handlers>


</beans>  