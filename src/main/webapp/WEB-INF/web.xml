<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <!-- Servlet 3.0 session id 获取方式 -->
    <session-config>
        <!-- 当用户第一次访问（既无cookies时）如果是返回的是重定向地址，不是jsp（这才会改变地址栏），如果开启URL_MODE，那么url就会加上jsessionid -->
        <!-- 开启可使禁用cookies的用户在重定向后的页面使用和前面一个页面相同的session id， 但也使虽没禁用cookies但第一次访问就是重定向的地址的用户地址栏也加上了 -->
        <!-- 由于禁用cookies的用户极少，故为了用户体验删除URL_MODE -->
        <!--<tracking-mode>URL</tracking-mode>--><!-- 容器将使用会话cookie追踪会话ID，移除此方式时，response.encodeRedirectURL也不会追加jsessionid了  -->
        <tracking-mode>COOKIE</tracking-mode><!-- 容器将只在URL中内嵌会话ID，不使用cookie或SSL会话ID-->
        <!--<tracking-mode>SSL</tracking-mode>--><!-- 容器将使用SSL会话ID作为HTTP会话ID，但要求使用的所有请求都必须是HTTPS请求 -->
    </session-config>

    <!--log4j config start 日志处理 -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:log4j.properties</param-value>
    </context-param>

    <!-- 监控配置文件变化 -->
    <!--<context-param>
        <param-name>log4jRefreshInterval</param-name>
        <param-value>60000</param-value>
    </context-param>-->

    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>
    <!-- log4j config end -->

    <!-- FileCleaningTracker thread stop -->
    <listener>
        <listener-class>org.apache.commons.fileupload.servlet.FileCleanerCleanup</listener-class>
    </listener>

    <!-- Session 监听器 -->
    <listener>
        <listener-class>site.imcoder.blog.listener.SessionListener</listener-class>
    </listener>

    <!-- 强制https -->
    <!--<filter>
        <filter-name>Http2HttpsFilter</filter-name>
        <filter-class>site.imcoder.blog.filter.Http2HttpsFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>Http2HttpsFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>-->

    <!-- spring编码过滤器 start -->
    <filter>
        <filter-name>spring_encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>spring_encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- spring编码过滤器 end -->

    <!--  压缩过滤器 -->
    <filter>
        <filter-name>CompressFilter</filter-name>
        <filter-class>site.imcoder.blog.filter.CompressFilter</filter-class>
        <init-param>
            <param-name>ExcludedPages</param-name>
            <param-value>/socketServer,/static/*</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CompressFilter</filter-name>
        <!-- 不设置dispatcher默认为REQUEST -->
        <url-pattern>/*</url-pattern>
        <!-- 当gzip注解是直接标记response头Accept-Encoding时，需要拦截.jsp的error转发，这样配置的500错误页面才会有用， -->
        <!-- 因为报异常时不会创建gzip输出流，导致header指定了编码，实际输出未编码，或者通过其他方式标记 -->
        <!-- 但是千万不能拦截jsp的forward请求，这样就会输出两次，造成数据被压缩编码两次（或者在代码里判断） -->
        <!-- <url-pattern>*.jsp</url-pattern> -->
        <!-- <dispatcher>REQUEST</dispatcher> -->
        <!-- <dispatcher>ERROR</dispatcher> -->
    </filter-mapping>

    <!-- 系统配置文件 -->
    <context-param>
        <param-name>server_config_location</param-name>
        <param-value>classpath:server/ServerConfig.xml</param-value>
    </context-param>

    <!-- 静态资源 -->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>/static/*</url-pattern>
    </servlet-mapping>

    <!-- spring mvc start-->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/applicationContext.xml,classpath:spring/springmvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <!-- / 只替换默认default-servlet，不替换jsp-servlet等其他内置servlet -->
        <!-- /* 替换所有内置servlet，包含default-servlet,jsp-servlet等 -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    <!-- spring mvc end -->

    <welcome-file-list>
        <welcome-file>/WEB-INF/views/site/jumpHome.jsp</welcome-file>
    </welcome-file-list>

    <error-page>
        <error-code>404</error-code>
        <location>/WEB-INF/views/error/404.jsp</location>
    </error-page>
    <error-page>
        <error-code>400</error-code>
        <location>/WEB-INF/views/error/400.jsp</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/WEB-INF/views/error/500.jsp</location>
    </error-page>

    <!-- 去掉jsp多余空格 -->
    <jsp-config>
        <jsp-property-group>
            <url-pattern>*.jsp</url-pattern>
            <trim-directive-whitespaces>true</trim-directive-whitespaces>
        </jsp-property-group>
    </jsp-config>

    <!-- Cache-Control: ExpiresFilter的修改版，增加排除页面 -->
    <!--<filter>
        <filter-name>ExpiresFilter</filter-name>
        <filter-class>site.imcoder.blog.filter.CacheControlFilter</filter-class>
        <init-param>
            <param-name>ExcludedPages</param-name>
            <param-value>*.api,*.do,/socketServer</param-value>
        </init-param>
        <init-param>
            <param-name>ExpiresByType image</param-name>
            <param-value>access plus 1 months</param-value>
        </init-param>
        <init-param>
            <param-name>ExpiresByType audio</param-name>
            <param-value>access plus 1 months</param-value>
        </init-param>
        <init-param>
            <param-name>ExpiresByType video</param-name>
            <param-value>access plus 4 months</param-value>
        </init-param>
        <init-param>
            <param-name>ExpiresByType text/css</param-name>
            <param-value>access plus 15 days</param-value>
        </init-param>
        <init-param>
            <param-name>ExpiresByType application/javascript</param-name>
            <param-value>access plus 15 days</param-value>
        </init-param>
        <init-param>
            <param-name>ExpiresDefault</param-name>
            <param-value>access plus 15 days</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>ExpiresFilter</filter-name>
        <url-pattern>/static/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>-->

</web-app>